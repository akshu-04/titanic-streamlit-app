{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "35c380a5-96b3-48da-a8bc-cad8ccf6e3fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-21 16:25:33.165 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Lenovo\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-03-21 16:25:33.171 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import joblib\n",
    "\n",
    "# Function to preprocess input data\n",
    "def preprocess_input_data(df):\n",
    "    # Handle missing values\n",
    "    df['Age'].fillna(df['Age'].median(), inplace=True)\n",
    "    df['Fare'].fillna(df['Fare'].median(), inplace=True)\n",
    "    df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n",
    "    df.drop('Cabin', axis=1, inplace=True)\n",
    "    \n",
    "    # Encode categorical variables\n",
    "    label_encoder = LabelEncoder()\n",
    "    df['Sex'] = label_encoder.fit_transform(df['Sex'])\n",
    "    df['Embarked'] = label_encoder.fit_transform(df['Embarked'])\n",
    "    \n",
    "    return df\n",
    "\n",
    "# Function to train the model\n",
    "def train_model(df):\n",
    "    # Separate features and target variable\n",
    "    X = df.drop(['Survived'], axis=1)\n",
    "    y = df['Survived']\n",
    "    \n",
    "    # Preprocess input data\n",
    "    X = preprocess_input_data(X)\n",
    "    \n",
    "    # Split the data into training and testing sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    \n",
    "    # Initialize logistic regression model\n",
    "    logreg_model = LogisticRegression()\n",
    "    \n",
    "    # Train the model\n",
    "    logreg_model.fit(X_train, y_train)\n",
    "    \n",
    "    # Evaluate the model\n",
    "    accuracy = logreg_model.score(X_test, y_test)\n",
    "    \n",
    "    return logreg_model, accuracy\n",
    "\n",
    "# Streamlit app\n",
    "def main():\n",
    "    st.title('Titanic Survival Prediction')\n",
    "    \n",
    "    st.sidebar.header('Training the Model')\n",
    "    \n",
    "    # Upload dataset\n",
    "    uploaded_file = st.sidebar.file_uploader(\"Upload CSV file\", type=[\"csv\"])\n",
    "    \n",
    "    if uploaded_file is not None:\n",
    "        df = pd.read_csv(uploaded_file)\n",
    "        st.sidebar.success('Dataset successfully uploaded.')\n",
    "        st.sidebar.subheader('Sample of the dataset:')\n",
    "        st.sidebar.write(df.head())\n",
    "        \n",
    "        if st.sidebar.button('Train Model'):\n",
    "            try:\n",
    "                model, accuracy = train_model(df)\n",
    "                st.success(f'Model trained with accuracy: {accuracy:.2f}')\n",
    "            except Exception as e:\n",
    "                st.error(f'Error occurred while training the model: {e}')\n",
    "            \n",
    "            # Option to save the trained model\n",
    "            if st.sidebar.button('Save Model'):\n",
    "                model_path = 'trained_model.pkl'\n",
    "                joblib.dump(model, model_path)\n",
    "                st.success(f'Model saved as {model_path}')\n",
    "\n",
    "    st.sidebar.header('User Input Features')\n",
    "    \n",
    "    # Collect user input features\n",
    "    def collect_user_input():\n",
    "        sex = st.sidebar.selectbox('Sex',['male', 'female'])\n",
    "        age = st.sidebar.slider('Age', 0, 100, 30)\n",
    "        pclass = st.sidebar.selectbox('Pclass', [1, 2, 3])\n",
    "        sibsp = st.sidebar.slider('Siblings/Spouses Aboard', 0, 10, 0)\n",
    "        parch = st.sidebar.slider('Parents/Children Aboard', 0, 10, 0)\n",
    "        fare = st.sidebar.slider('Fare', 0, 100, 10)\n",
    "        embarked = st.sidebar.selectbox('Embarked', ['C', 'Q', 'S'])\n",
    "        \n",
    "        # Create a dictionary with user input\n",
    "        user_input = {\n",
    "            'Sex': sex,\n",
    "            'Age': age,\n",
    "            'Pclass': pclass,\n",
    "            'SibSp': sibsp,\n",
    "            'Parch': parch,\n",
    "            'Fare': fare,\n",
    "            'Embarked': embarked\n",
    "        }\n",
    "        \n",
    "        return pd.DataFrame([user_input])\n",
    "    \n",
    "    input_df = collect_user_input()\n",
    "    \n",
    "    if st.sidebar.button('Predict'):\n",
    "        try:\n",
    "            model_path = 'trained_model.pkl'\n",
    "            model = joblib.load(model_path)\n",
    "            prediction = model.predict(preprocess_input_data(input_df))\n",
    "            if prediction[0] == 1:\n",
    "                st.success('The passenger is predicted to survive!')\n",
    "            else:\n",
    "                st.error('The passenger is predicted not to survive.')\n",
    "            st.dataframe(input_df)\n",
    "        except Exception as e:\n",
    "            st.error(f'Error occurred while loading the model: {e}')\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e2b1d36-55b4-4fdc-9731-5eefba8cbf42",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
